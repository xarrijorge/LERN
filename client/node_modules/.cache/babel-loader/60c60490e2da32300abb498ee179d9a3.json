{"ast":null,"code":"var _jsxFileName = \"/home/odin/Dev/lern/src/components/map.js\";\nimport React, { useState, useRef } from 'react';\nimport useSwr from 'swr';\nimport GoogleMapReact from 'google-map-react';\nimport useSuperCluster from 'use-supercluster';\nimport Axios from 'axios';\n\nconst fetcher = url => Axios.get(url).then(response => response.data);\n\nconst Marker = ({\n  children\n}) => children;\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null); //load and format data\n\n  const url = 'http://localhost:3001/reports';\n  const {\n    data\n  } = useSwr(url, fetcher);\n  const reports = data ? data : [];\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  })); //get clusters\n\n  const {\n    clusters,\n    supercluster\n  } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  }); //render map\n\n  return React.createElement(\"div\", {\n    className: \"columns\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_LERN_MAP_API_KEY\n    },\n    defaultCenter: {\n      lat: 6.4802,\n      lng: -9.6728\n    } // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n    ,\n    defaultZoom: 8.2,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, clusters.map(cluster => {\n    const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties;\n\n    if (isCluster) {\n      return React.createElement(Marker, {\n        key: cluster.id,\n        lat: LATITUDE,\n        lng: LONGITUDE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        // className=\"clusterMarker\"\n        style: {\n          width: `${10 + pointCount / points.length * 20}px`,\n          height: `${10 + pointCount / points.length * 20}px`,\n          borderWidth: `${pointCount / points.length * 5}px`\n        },\n        onClick: () => {\n          const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n          mapRef.current.setZoom(expansionZoom);\n          mapRef.current.panTo({\n            lat: LATITUDE,\n            lng: LONGITUDE\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, pointCount));\n    }\n\n    return React.createElement(Marker, {\n      key: cluster.properties.reportId,\n      lat: LATITUDE,\n      lng: LONGITUDE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons mapMarker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"place\"));\n  })))));\n}","map":{"version":3,"sources":["/home/odin/Dev/lern/src/components/map.js"],"names":["React","useState","useRef","useSwr","GoogleMapReact","useSuperCluster","Axios","fetcher","url","get","then","response","data","Marker","children","Map","mapRef","zoom","setZoom","bounds","setBounds","reports","points","map","report","type","properties","cluster","reportId","category","CATEGORY","geometry","coordinates","parseFloat","LONGITUDE","LATITUDE","clusters","supercluster","options","radius","maxZoom","key","process","env","REACT_APP_LERN_MAP_API_KEY","lat","lng","current","nw","se","isCluster","point_count","pointCount","id","width","length","height","borderWidth","expansionZoom","Math","min","getClusterExpansionZoom","panTo"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport useSwr from 'swr'\nimport GoogleMapReact from 'google-map-react'\nimport useSuperCluster from 'use-supercluster'\nimport Axios from 'axios'\n\nconst fetcher = url => Axios.get(url).then(response => response.data)\n\nconst Marker = ({ children }) => children\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef()\n  const [zoom, setZoom] = useState(10)\n  const [bounds, setBounds] = useState(null)\n  //load and format data\n  const url = 'http://localhost:3001/reports'\n  const { data } = useSwr(url, fetcher)\n\n  const reports = data ? data : []\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  }))\n\n  //get clusters\n  const { clusters, supercluster } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 }\n  })\n\n  //render map\n  return (\n    <div className=\"columns\">\n      <div className=\"column\">\n        <div className=\"map\">\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: process.env.REACT_APP_LERN_MAP_API_KEY }}\n            defaultCenter={{ lat: 6.4802, lng: -9.6728 }}\n            // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n            defaultZoom={8.2}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map }) => {\n              mapRef.current = map\n            }}\n            onChange={({ zoom, bounds }) => {\n              setZoom(zoom)\n              setBounds([\n                bounds.nw.lng,\n                bounds.se.lat,\n                bounds.se.lng,\n                bounds.nw.lat\n              ])\n            }}\n          >\n            {/* Markers */}\n            {clusters.map(cluster => {\n              const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates\n              const {\n                cluster: isCluster,\n                point_count: pointCount\n              } = cluster.properties\n\n              if (isCluster) {\n                return (\n                  <Marker key={cluster.id} lat={LATITUDE} lng={LONGITUDE}>\n                    <div\n                      // className=\"clusterMarker\"\n                      style={{\n                        width: `${10 + (pointCount / points.length) * 20}px`,\n                        height: `${10 + (pointCount / points.length) * 20}px`,\n                        borderWidth: `${(pointCount / points.length) * 5}px`\n                      }}\n                      onClick={() => {\n                        const expansionZoom = Math.min(\n                          supercluster.getClusterExpansionZoom(cluster.id),\n                          20\n                        )\n                        mapRef.current.setZoom(expansionZoom)\n                        mapRef.current.panTo({ lat: LATITUDE, lng: LONGITUDE })\n                      }}\n                    >\n                      {pointCount}\n                    </div>\n                  </Marker>\n                )\n              }\n\n              return (\n                <Marker\n                  key={cluster.properties.reportId}\n                  lat={LATITUDE}\n                  lng={LONGITUDE}\n                >\n                  <i className=\"material-icons mapMarker\">place</i>\n                </Marker>\n              )\n            })}\n          </GoogleMapReact>\n        </div>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}