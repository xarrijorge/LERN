{"ast":null,"code":"var _jsxFileName = \"/home/odin/Dev/lern/src/components/map.js\";\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport useSwr from 'swr';\nimport GoogleMapReact from 'google-map-react';\nimport useSuperCluster from 'use-supercluster';\n\nconst fetcher = (...args) => axios.get(...args).then(response => response.data);\n\nconst Marker = ({\n  children\n}) => children;\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null); //load and format data\n\n  const URL = 'http//localhost:3001/reports';\n  const {\n    data,\n    error\n  } = useSwr(URL, fetcher);\n  const reports = data && !error ? data.slice(0, 200) : []; //get clusters\n  //render map\n\n  return React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_LERN_MAP_API_KEY\n    },\n    defaultCenter: {\n      lat: 6.4802,\n      lng: -9.6728\n    },\n    defaultZoom: 8.2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, reports.map(report => React.createElement(Marker, {\n    key: report['#'],\n    lat: report.LATITUDE,\n    lng: report.LONGITUDElocation.longitude,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"material-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"place\")))));\n}","map":{"version":3,"sources":["/home/odin/Dev/lern/src/components/map.js"],"names":["React","useState","useRef","axios","useSwr","GoogleMapReact","useSuperCluster","fetcher","args","get","then","response","data","Marker","children","Map","mapRef","zoom","setZoom","bounds","setBounds","URL","error","reports","slice","height","width","key","process","env","REACT_APP_LERN_MAP_API_KEY","lat","lng","map","report","LATITUDE","LONGITUDElocation","longitude"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;;AAEA,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KAAaL,KAAK,CAACM,GAAN,CAAU,GAAGD,IAAb,EAAmBE,IAAnB,CAAwBC,QAAQ,IAAIA,QAAQ,CAACC,IAA7C,CAA7B;;AACA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAjC;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B;AACA,QAAMC,MAAM,GAAGd,MAAM,EAArB;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,IAAD,CAApC,CAJ4B,CAM5B;;AACA,QAAMoB,GAAG,GAAG,8BAAZ;AACA,QAAM;AAAET,IAAAA,IAAF;AAAQU,IAAAA;AAAR,MAAkBlB,MAAM,CAACiB,GAAD,EAAMd,OAAN,CAA9B;AAEA,QAAMgB,OAAO,GAAGX,IAAI,IAAI,CAACU,KAAT,GAAiBV,IAAI,CAACY,KAAL,CAAW,CAAX,EAAc,GAAd,CAAjB,GAAsC,EAAtD,CAV4B,CAW5B;AACA;;AACA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAE;AAAEC,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,KADpB;AAEE,IAAA,aAAa,EAAE;AAAEC,MAAAA,GAAG,EAAE,MAAP;AAAeC,MAAAA,GAAG,EAAE,CAAC;AAArB,KAFjB;AAGE,IAAA,WAAW,EAAE,GAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,OAAO,CAACU,GAAR,CAAYC,MAAM,IACjB,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,MAAM,CAAC,GAAD,CADb;AAEE,IAAA,GAAG,EAAEA,MAAM,CAACC,QAFd;AAGE,IAAA,GAAG,EAAED,MAAM,CAACE,iBAAP,CAAyBC,SAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAG,IAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF,CADD,CANH,CADF,CADF;AAoBD","sourcesContent":["import React, { useState, useRef } from 'react'\nimport axios from 'axios'\nimport useSwr from 'swr'\nimport GoogleMapReact from 'google-map-react'\nimport useSuperCluster from 'use-supercluster'\n\nconst fetcher = (...args) => axios.get(...args).then(response => response.data)\nconst Marker = ({ children }) => children\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef()\n  const [zoom, setZoom] = useState(10)\n  const [bounds, setBounds] = useState(null)\n\n  //load and format data\n  const URL = 'http//localhost:3001/reports'\n  const { data, error } = useSwr(URL, fetcher)\n\n  const reports = data && !error ? data.slice(0, 200) : []\n  //get clusters\n  //render map\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_LERN_MAP_API_KEY }}\n        defaultCenter={{ lat: 6.4802, lng: -9.6728 }}\n        defaultZoom={8.2}\n      >\n        {/* Markers */}\n        {reports.map(report => (\n          <Marker\n            key={report['#']}\n            lat={report.LATITUDE}\n            lng={report.LONGITUDElocation.longitude}\n          >\n            <i className=\"material-icons\">place</i>\n          </Marker>\n        ))}\n      </GoogleMapReact>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}