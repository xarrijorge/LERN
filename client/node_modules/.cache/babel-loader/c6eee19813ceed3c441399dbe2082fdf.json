{"ast":null,"code":"import isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online'; // Cache\n\nconst __cache = new Map();\n\nfunction cacheGet(key) {\n  return __cache.get(key);\n}\n\nfunction cacheSet(key, value) {\n  return __cache.set(key, value);\n}\n\nfunction cacheClear() {\n  __cache.clear();\n} // state managers\n\n\nconst CONCURRENT_PROMISES = {};\nconst CONCURRENT_PROMISES_TS = {};\nconst FOCUS_REVALIDATORS = {};\nconst CACHE_REVALIDATORS = {};\nconst MUTATION_TS = {}; // error retry\n\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n  if (!isDocumentVisible()) {\n    // if it's hidden, stop\n    // it will auto revalidate when focus\n    return;\n  } // exponential backoff\n\n\n  const count = Math.min(opts.retryCount || 0, 8);\n  const timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n  setTimeout(revalidate, timeout, opts);\n} // config\n\n\nconst defaultConfig = {\n  // events\n  onLoadingSlow: () => {},\n  onSuccess: () => {},\n  onError: () => {},\n  onErrorRetry,\n  errorRetryInterval: 5 * 1000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: 3 * 1000,\n  refreshInterval: 0,\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  refreshWhenHidden: false,\n  refreshWhenOffline: false,\n  shouldRetryOnError: true,\n  suspense: false\n};\n\nif (typeof window !== 'undefined') {\n  // client side: need to adjust the config\n  // based on the browser status\n  // slow connection (<= 70Kbps)\n  if (navigator['connection']) {\n    if (['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1) {\n      defaultConfig.errorRetryInterval = 10 * 1000;\n      defaultConfig.loadingTimeout = 5 * 1000;\n    }\n  }\n} // Focus revalidate\n\n\nlet eventsBinded = false;\n\nif (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {\n  const revalidate = () => {\n    if (!isDocumentVisible() || !isOnline()) return;\n\n    for (let key in FOCUS_REVALIDATORS) {\n      if (FOCUS_REVALIDATORS[key][0]) FOCUS_REVALIDATORS[key][0]();\n    }\n  };\n\n  window.addEventListener('visibilitychange', revalidate, false);\n  window.addEventListener('focus', revalidate, false); // only bind the events once\n\n  eventsBinded = true;\n}\n\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cacheGet, cacheSet, cacheClear };\nexport default defaultConfig;","map":{"version":3,"sources":["/home/odin/Dev/lern/node_modules/swr/esm/config.js"],"names":["isDocumentVisible","isOnline","__cache","Map","cacheGet","key","get","cacheSet","value","set","cacheClear","clear","CONCURRENT_PROMISES","CONCURRENT_PROMISES_TS","FOCUS_REVALIDATORS","CACHE_REVALIDATORS","MUTATION_TS","onErrorRetry","_","__","config","revalidate","opts","count","Math","min","retryCount","timeout","random","errorRetryInterval","setTimeout","defaultConfig","onLoadingSlow","onSuccess","onError","focusThrottleInterval","dedupingInterval","loadingTimeout","refreshInterval","revalidateOnFocus","revalidateOnReconnect","refreshWhenHidden","refreshWhenOffline","shouldRetryOnError","suspense","window","navigator","indexOf","effectiveType","eventsBinded","addEventListener"],"mappings":"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","sourcesContent":["import isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\n// Cache\nconst __cache = new Map();\nfunction cacheGet(key) {\n    return __cache.get(key);\n}\nfunction cacheSet(key, value) {\n    return __cache.set(key, value);\n}\nfunction cacheClear() {\n    __cache.clear();\n}\n// state managers\nconst CONCURRENT_PROMISES = {};\nconst CONCURRENT_PROMISES_TS = {};\nconst FOCUS_REVALIDATORS = {};\nconst CACHE_REVALIDATORS = {};\nconst MUTATION_TS = {};\n// error retry\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n    if (!isDocumentVisible()) {\n        // if it's hidden, stop\n        // it will auto revalidate when focus\n        return;\n    }\n    // exponential backoff\n    const count = Math.min(opts.retryCount || 0, 8);\n    const timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n    setTimeout(revalidate, timeout, opts);\n}\n// config\nconst defaultConfig = {\n    // events\n    onLoadingSlow: () => { },\n    onSuccess: () => { },\n    onError: () => { },\n    onErrorRetry,\n    errorRetryInterval: 5 * 1000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: 3 * 1000,\n    refreshInterval: 0,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    shouldRetryOnError: true,\n    suspense: false\n};\nif (typeof window !== 'undefined') {\n    // client side: need to adjust the config\n    // based on the browser status\n    // slow connection (<= 70Kbps)\n    if (navigator['connection']) {\n        if (['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1) {\n            defaultConfig.errorRetryInterval = 10 * 1000;\n            defaultConfig.loadingTimeout = 5 * 1000;\n        }\n    }\n}\n// Focus revalidate\nlet eventsBinded = false;\nif (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {\n    const revalidate = () => {\n        if (!isDocumentVisible() || !isOnline())\n            return;\n        for (let key in FOCUS_REVALIDATORS) {\n            if (FOCUS_REVALIDATORS[key][0])\n                FOCUS_REVALIDATORS[key][0]();\n        }\n    };\n    window.addEventListener('visibilitychange', revalidate, false);\n    window.addEventListener('focus', revalidate, false);\n    // only bind the events once\n    eventsBinded = true;\n}\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cacheGet, cacheSet, cacheClear };\nexport default defaultConfig;\n"]},"metadata":{},"sourceType":"module"}