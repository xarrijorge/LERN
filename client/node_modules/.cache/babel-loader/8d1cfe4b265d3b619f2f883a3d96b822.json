{"ast":null,"code":"var _jsxFileName = \"/home/odin/Dev/lern/src/components/map.js\";\nimport React, { useState, useRef, Fragment } from 'react';\nimport useSwr from 'swr';\nimport GoogleMapReact from 'google-map-react';\nimport useSuperCluster from 'use-supercluster';\nimport Axios from 'axios';\nimport FilterNav from './filter';\n\nconst fetcher = url => Axios.get(url).then(response => response.data);\n\nconst Marker = ({\n  children\n}) => children;\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null); //load and format data\n\n  const url = 'http://localhost:3001/reports'; // const url =\n  //   'https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10'\n\n  const {\n    data\n  } = useSwr(url, fetcher);\n  const reports = data ? data : [];\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  })); //get clusters\n\n  const {\n    clusters,\n    supercluster\n  } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  }); //render map\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      height: '95vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_LERN_MAP_API_KEY\n    },\n    defaultCenter: {\n      lat: 6.4802,\n      lng: -9.6728\n    } // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n    ,\n    defaultZoom: 8.2,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, clusters.map(cluster => {\n    const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties;\n\n    if (isCluster) {\n      return React.createElement(Marker, {\n        key: cluster.id,\n        lat: LATITUDE,\n        lng: LONGITUDE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"clusterMarker\",\n        style: {\n          width: `${10 + pointCount / points.length * 20}px`,\n          height: `${10 + pointCount / points.length * 20}px`,\n          borderWidth: `${pointCount / points.length * 5}px`\n        },\n        onClick: () => {\n          const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n          mapRef.current.setZoom(expansionZoom);\n          mapRef.current.panTo({\n            lat: LATITUDE,\n            lng: LONGITUDE\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, pointCount));\n    }\n\n    return React.createElement(Marker, {\n      key: cluster.properties.reportId,\n      lat: LATITUDE,\n      lng: LONGITUDE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons mapMarker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"place\"));\n  }))));\n}","map":{"version":3,"sources":["/home/odin/Dev/lern/src/components/map.js"],"names":["React","useState","useRef","Fragment","useSwr","GoogleMapReact","useSuperCluster","Axios","FilterNav","fetcher","url","get","then","response","data","Marker","children","Map","mapRef","zoom","setZoom","bounds","setBounds","reports","points","map","report","type","properties","cluster","reportId","category","CATEGORY","geometry","coordinates","parseFloat","LONGITUDE","LATITUDE","clusters","supercluster","options","radius","maxZoom","height","width","key","process","env","REACT_APP_LERN_MAP_API_KEY","lat","lng","current","nw","se","isCluster","point_count","pointCount","id","length","borderWidth","expansionZoom","Math","min","getClusterExpansionZoom","panTo"],"mappings":"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","sourcesContent":["import React, { useState, useRef, Fragment } from 'react'\nimport useSwr from 'swr'\nimport GoogleMapReact from 'google-map-react'\nimport useSuperCluster from 'use-supercluster'\nimport Axios from 'axios'\nimport FilterNav from './filter'\n\nconst fetcher = url => Axios.get(url).then(response => response.data)\n\nconst Marker = ({ children }) => children\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef()\n  const [zoom, setZoom] = useState(10)\n  const [bounds, setBounds] = useState(null)\n  //load and format data\n  const url = 'http://localhost:3001/reports'\n  // const url =\n  //   'https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10'\n  const { data } = useSwr(url, fetcher)\n\n  const reports = data ? data : []\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  }))\n\n  //get clusters\n  const { clusters, supercluster } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 }\n  })\n\n  //render map\n  return (\n    <Fragment>\n      <div style={{ height: '95vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: process.env.REACT_APP_LERN_MAP_API_KEY }}\n          defaultCenter={{ lat: 6.4802, lng: -9.6728 }}\n          // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n          defaultZoom={8.2}\n          yesIWantToUseGoogleMapApiInternals\n          onGoogleApiLoaded={({ map }) => {\n            mapRef.current = map\n          }}\n          onChange={({ zoom, bounds }) => {\n            setZoom(zoom)\n            setBounds([\n              bounds.nw.lng,\n              bounds.se.lat,\n              bounds.se.lng,\n              bounds.nw.lat\n            ])\n          }}\n        >\n          {/* Markers */}\n          {clusters.map(cluster => {\n            const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates\n            const {\n              cluster: isCluster,\n              point_count: pointCount\n            } = cluster.properties\n\n            if (isCluster) {\n              return (\n                <Marker key={cluster.id} lat={LATITUDE} lng={LONGITUDE}>\n                  <div\n                    className=\"clusterMarker\"\n                    style={{\n                      width: `${10 + (pointCount / points.length) * 20}px`,\n                      height: `${10 + (pointCount / points.length) * 20}px`,\n                      borderWidth: `${(pointCount / points.length) * 5}px`\n                    }}\n                    onClick={() => {\n                      const expansionZoom = Math.min(\n                        supercluster.getClusterExpansionZoom(cluster.id),\n                        20\n                      )\n                      mapRef.current.setZoom(expansionZoom)\n                      mapRef.current.panTo({ lat: LATITUDE, lng: LONGITUDE })\n                    }}\n                  >\n                    {pointCount}\n                  </div>\n                </Marker>\n              )\n            }\n\n            return (\n              <Marker\n                key={cluster.properties.reportId}\n                lat={LATITUDE}\n                lng={LONGITUDE}\n              >\n                <i className=\"material-icons mapMarker\">place</i>\n              </Marker>\n            )\n          })}\n        </GoogleMapReact>\n      </div>\n    </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}