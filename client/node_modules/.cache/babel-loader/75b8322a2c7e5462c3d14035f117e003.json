{"ast":null,"code":"var _jsxFileName = \"/home/odin/Dev/lern/src/components/map.js\";\nimport React, { useState, useRef } from 'react';\nimport useSwr from 'swr';\nimport GoogleMapReact from 'google-map-react';\nimport useSuperCluster from 'use-supercluster';\nimport Axios from 'axios';\n\nconst fetcher = url => Axios.get(url).then(response => response.data);\n\nconst Marker = ({\n  children\n}) => children;\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(10);\n  const [bounds, setBounds] = useState(null); //load and format data\n\n  const URL = 'http://localhost:3001/reports';\n  const url = 'https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10';\n  const {\n    data\n  } = useSwr(URL, fetcher);\n  const reports = data ? data : [];\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  })); //get clusters\n\n  const {\n    clusters,\n    supercluster\n  } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n  console.log(clusters); //render map\n\n  return React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: process.env.REACT_APP_LERN_MAP_API_KEY\n    },\n    defaultCenter: {\n      lat: 6.4802,\n      lng: -9.6728\n    } // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n    ,\n    defaultZoom: 10,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, clusters.map(cluster => {\n    const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties;\n\n    if (isCluster) {\n      return React.createElement(\"marker\", {\n        key: cluster.id,\n        lat: LATITUDE,\n        lng: LONGITUDE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"clusterMarker\",\n        style: {\n          width: `${10 + pointCount / points.length * 20}px`,\n          height: `${10 + pointCount / points.length * 20}px`,\n          borderWidth: `${pointCount / points.length * 5}px`\n        },\n        onClick: () => {\n          const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, pointCount));\n    }\n\n    return React.createElement(Marker, {\n      key: cluster.properties.reportId,\n      lat: LATITUDE,\n      lng: LONGITUDE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"material-icons mapMarker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"place\"));\n  })));\n}","map":{"version":3,"sources":["/home/odin/Dev/lern/src/components/map.js"],"names":["React","useState","useRef","useSwr","GoogleMapReact","useSuperCluster","Axios","fetcher","url","get","then","response","data","Marker","children","Map","mapRef","zoom","setZoom","bounds","setBounds","URL","reports","points","map","report","type","properties","cluster","reportId","category","CATEGORY","geometry","coordinates","parseFloat","LONGITUDE","LATITUDE","clusters","supercluster","options","radius","maxZoom","console","log","height","width","key","process","env","REACT_APP_LERN_MAP_API_KEY","lat","lng","current","nw","se","isCluster","point_count","pointCount","id","length","borderWidth","expansionZoom","Math","min","getClusterExpansionZoom"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport useSwr from 'swr'\nimport GoogleMapReact from 'google-map-react'\nimport useSuperCluster from 'use-supercluster'\nimport Axios from 'axios'\n\nconst fetcher = url => Axios.get(url).then(response => response.data)\n\nconst Marker = ({ children }) => children\n\nexport default function Map() {\n  //   map setup\n  const mapRef = useRef()\n  const [zoom, setZoom] = useState(10)\n  const [bounds, setBounds] = useState(null)\n\n  //load and format data\n  const URL = 'http://localhost:3001/reports'\n  const url =\n    'https://data.police.uk/api/crimes-street/all-crime?lat=52.629729&lng=-1.131592&date=2019-10'\n  const { data } = useSwr(URL, fetcher)\n\n  const reports = data ? data : []\n  const points = reports.map(report => ({\n    type: 'Feature',\n    properties: {\n      cluster: false,\n      reportId: report['#'],\n      category: report.CATEGORY\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(report.LONGITUDE), parseFloat(report.LATITUDE)]\n    }\n  }))\n\n  //get clusters\n  const { clusters, supercluster } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 }\n  })\n\n  console.log(clusters)\n\n  //render map\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: process.env.REACT_APP_LERN_MAP_API_KEY }}\n        defaultCenter={{ lat: 6.4802, lng: -9.6728 }}\n        // defaultCenter={{ lat: 52.6376, lng: -1.135171 }}\n        defaultZoom={10}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map }) => {\n          mapRef.current = map\n        }}\n        onChange={({ zoom, bounds }) => {\n          setZoom(zoom)\n          setBounds([\n            bounds.nw.lng,\n            bounds.se.lat,\n            bounds.se.lng,\n            bounds.nw.lat\n          ])\n        }}\n      >\n        {/* Markers */}\n        {clusters.map(cluster => {\n          const [LONGITUDE, LATITUDE] = cluster.geometry.coordinates\n          const {\n            cluster: isCluster,\n            point_count: pointCount\n          } = cluster.properties\n\n          if (isCluster) {\n            return (\n              <marker key={cluster.id} lat={LATITUDE} lng={LONGITUDE}>\n                <div\n                  className=\"clusterMarker\"\n                  style={{\n                    width: `${10 + (pointCount / points.length) * 20}px`,\n                    height: `${10 + (pointCount / points.length) * 20}px`,\n                    borderWidth: `${(pointCount / points.length) * 5}px`\n                  }}\n                  onClick={() => {\n                    const expansionZoom = Math.min(\n                      supercluster.getClusterExpansionZoom(cluster.id),\n                      20\n                    )\n                  }}\n                >\n                  {pointCount}\n                </div>\n              </marker>\n            )\n          }\n\n          return (\n            <Marker\n              key={cluster.properties.reportId}\n              lat={LATITUDE}\n              lng={LONGITUDE}\n            >\n              <i className=\"material-icons mapMarker\">place</i>\n            </Marker>\n          )\n        })}\n      </GoogleMapReact>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}